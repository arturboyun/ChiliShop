version: "3.3"
services:

  proxy:
    image: traefik:v2.2
    networks:
      - traefik-public
      - default
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-public-certificates:/certificates
    ports:
      - 80:80
      - 443:443
    command:
      - "--log.level=DEBUG"
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode
      - --providers.docker.swarmmode
      # HTTP
      - --entrypoints.http.address=:80
      # HTTPS
      - --entrypoints.https.address=:443
      # Certs
      - --certificatesresolvers.le.acme.email=arturboyun@gmail.com
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json
      - --certificatesresolvers.le.acme.tlschallenge=true
      - --accesslog
      - --log
      - --api
    deploy:
      placement:
        constraints:
          - node.labels.traefik-public.traefik-public-certificates == true
          - node.role == manager
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=traefik-public
        - traefik.http.services.dashboard.loadbalancer.server.port=8080
        # HTTP
        - traefik.http.routers.dashboard-http.entrypoints=http
        - traefik.http.routers.dashboard-http.rule=Host(`traefik.chili-lingerie.com`)
        # HTTPS
        - traefik.http.routers.dashboard-https.entrypoints=https
        - traefik.http.routers.dashboard-https.rule=Host(`traefik.chili-lingerie.com`)
        - traefik.http.routers.dashboard-https.tls=true
        - traefik.http.routers.dashboard-https.tls.certresolver=le

        - traefik.http.routers.dashboard-https.service=api@internal

        # https-redirect middleware for redirect from HTTP to HTTPS
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        - traefik.http.routers.dashboard-http.middlewares=https-redirect
        # BASIC AUTH FOR TRAEFIK
        - traefik.http.middlewares.admin-auth.basicauth.users=${TRAEFIK_ADMIN?Variable not set}:${TRAEFIK_HASHED_PASSWORD?Variable not set}
        # Add to app-http https-redirect middleware
        - traefik.http.routers.dashboard-https.middlewares=admin-auth
        
        # Network
        - traefik.docker.network=traefik-public

  db:
    image: postgres:12
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    deploy:
      placement:
        constraints:
          - node.labels.chili.app-db-data == true

  pgadmin:
    image: dpage/pgadmin4
    networks:
      - traefik-public
      - default
    depends_on:
      - db
    env_file:
      - .env
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label-stack=traefik-public
        - traefik.http.routers.chili-pgadmin-http.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)
        - traefik.http.routers.chili-pgadmin-http.entrypoints=http
        - traefik.http.routers.chili-pgadmin-http.middlewares=chili-https-redirect
        - traefik.http.routers.chili-pgadmin-https.rule=Host(`pgadmin.${DOMAIN?Variable not set}`)
        - traefik.http.routers.chili-pgadmin-https.entrypoints=https
        - traefik.http.routers.chili-pgadmin-https.tls=true
        - traefik.http.routers.chili-pgadmin-https.tls.certresolver=le
        - traefik.http.services.chili-pgadmin.loadbalancer.server.port=5050

  redis:
    image: redis:6.2-alpine
    networks:
      - traefik-public
      - default
  
  flower:
    image: mher/flower
    networks:
      - traefik-public
      - default
    env_file:
      - .env
    deploy:
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label-stack=traefik-public
        - traefik.http.routers.chili-flower-http.rule=Host(`flower.${DOMAIN?Variable not set}`)
        - traefik.http.routers.chili-flower-http.entrypoints=http
        - traefik.http.routers.chili-flower-http.middlewares=chili-https-redirect
        - traefik.http.routers.chili-flower-https.rule=Host(`flower.${DOMAIN?Variable not set}`)
        - traefik.http.routers.chili-flower-https.entrypoints=https
        - traefik.http.routers.chili-flower-https.tls=true
        - traefik.http.routers.chili-flower-https.tls.certresolver=le
        - traefik.http.services.chili-flower.loadbalancer.server.port=5555
  
  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      # - SMTP_HOST=${SMTP_HOST}
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    volumes:
      - media-backend:/media
    deploy:
      placement:
        constraints:
          - node.labels.chili.media-backend == true
      labels:
        - traefik.enable=true
        - traefik.constraint-label-stack=traefik-public
        - traefik.http.services.backend.loadbalancer.server.port=80
        # HTTP
        - traefik.http.routers.backend-http.entrypoints=http
        - traefik.http.routers.backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`) || PathPrefix(`/media`)
        # HTTPS
        - traefik.http.routers.backend-https.entrypoints=https
        - traefik.http.routers.backend-https.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`) || PathPrefix(`/media`)
        - traefik.http.routers.backend-https.tls=true
        - traefik.http.routers.backend-https.tls.certresolver=le
        # https-redirect middleware for redirect from HTTP to HTTPS
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # Add to app-http https-redirect middleware
        - traefik.http.routers.backend-http.middlewares=https-redirect
        # network
        - traefik.docker.network=traefik-public
    networks:
      - traefik-public
      - default
  
  celeryworker:
    image: '${DOCKER_IMAGE_CELERYWORKER?Variable not set}:${TAG-latest}'
    depends_on:
      - db
      - redis
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      # - SMTP_HOST=${SMTP_HOST?Variable not set}
    build:
      context: ./backend
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
  
  frontend:
    image: '${DOCKER_IMAGE_FRONTEND?Variable not set}:${TAG-latest}'
    build:
      context: ./frontend
      args:
        FRONTEND_ENV: ${FRONTEND_ENV-production}
    deploy:
      labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=traefik-public
      - traefik.http.services.frontend.loadbalancer.server.port=80
      # HTTP
      - traefik.http.routers.frontend-http.entrypoints=http
      - traefik.http.routers.frontend-http.rule=Host(`chili-lingerie.com`)
      # HTTPS
      - traefik.http.routers.frontend-https.entrypoints=https
      - traefik.http.routers.frontend-https.rule=Host(`chili-lingerie.com`)
      - traefik.http.routers.frontend-https.tls=true
      - traefik.http.routers.frontend-https.tls.certresolver=le
      # https-redirect middleware for redirect from HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Add to app-http https-redirect middleware
      - traefik.http.routers.frontend-http.middlewares=https-redirect
      # network
      - traefik.docker.network=traefik-public
    networks:
      - traefik-public
      - default

volumes:
  app-db-data:
  traefik-public-certificates:
  media-backend:

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
